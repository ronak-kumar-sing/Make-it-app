import { Ionicons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useContext, useEffect, useState } from 'react';
import { Modal, ScrollView, StyleSheet, Switch, Text, TouchableOpacity, View } from 'react-native';
import { AppContext } from '../context/AppContext';

const NotificationSettingsModal = ({ visible, onClose, theme }) => {
  const { updateSettings } = useContext(AppContext);

  const [notificationPrefs, setNotificationPrefs] = useState({
    taskReminders: true,
    examReminders: true,
    streakReminders: true,
    timerCompletions: true,
    dailyGoalReminders: true,
    achievements: true
  });

  // Load saved preferences
  useEffect(() => {
    if (visible) {
      loadPreferences();
    }
  }, [visible]);

  const loadPreferences = async () => {
    try {
      const savedPrefs = await AsyncStorage.getItem('notificationPreferences');
      if (savedPrefs) {
        setNotificationPrefs(JSON.parse(savedPrefs));
      }
    } catch (error) {
      console.error('Error loading notification preferences:', error);
    }
  };

  const handleToggleChange = (key, value) => {
    const updatedPrefs = { ...notificationPrefs, [key]: value };
    setNotificationPrefs(updatedPrefs);

    // Save to AsyncStorage
    AsyncStorage.setItem('notificationPreferences', JSON.stringify(updatedPrefs))
      .catch(error => console.error('Error saving notification preferences:', error));
  };

  const handleSavePreferences = () => {
    // Update global app settings with notification preferences
    updateSettings({ notificationPreferences: notificationPrefs });
    onClose();
  };

  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="slide"
      onRequestClose={onClose}
    >
      <View style={styles.modalOverlay}>
        <View style={[styles.modalContent, { backgroundColor: theme.card }]}>
          <View style={styles.header}>
            <Text style={[styles.title, { color: theme.text }]}>Notification Settings</Text>
            <TouchableOpacity onPress={onClose}>
              <Ionicons name="close" size={24} color={theme.text} />
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.scrollContent}>
            <View style={styles.section}>
              <Text style={[styles.sectionTitle, { color: theme.textSecondary }]}>STUDY REMINDERS</Text>

              <View style={[styles.settingItem, { borderBottomColor: theme.border }]}>
                <View style={styles.settingInfo}>
                  <Ionicons name="calendar" size={22} color={theme.primary} />
                  <View style={styles.settingTextContainer}>
                    <Text style={[styles.settingTitle, { color: theme.text }]}>Task Reminders</Text>
                    <Text style={[styles.settingDescription, { color: theme.textSecondary }]}>Notify about upcoming and due tasks</Text>
                  </View>
                </View>
                <Switch
                  trackColor={{ false: theme.border, true: theme.primary }}
                  thumbColor="#FFFFFF"
                  ios_backgroundColor={theme.border}
                  onValueChange={(value) => handleToggleChange('taskReminders', value)}
                  value={notificationPrefs.taskReminders}
                />
              </View>

              <View style={[styles.settingItem, { borderBottomColor: theme.border }]}>
                <View style={styles.settingInfo}>
                  <Ionicons name="school" size={22} color={theme.primary} />
                  <View style={styles.settingTextContainer}>
                    <Text style={[styles.settingTitle, { color: theme.text }]}>Exam Reminders</Text>
                    <Text style={[styles.settingDescription, { color: theme.textSecondary }]}>Notify about upcoming exams</Text>
                  </View>
                </View>
                <Switch
                  trackColor={{ false: theme.border, true: theme.primary }}
                  thumbColor="#FFFFFF"
                  ios_backgroundColor={theme.border}
                  onValueChange={(value) => handleToggleChange('examReminders', value)}
                  value={notificationPrefs.examReminders}
                />
              </View>
            </View>

            <View style={styles.section}>
              <Text style={[styles.sectionTitle, { color: theme.textSecondary }]}>TIMERS & GOALS</Text>

              <View style={[styles.settingItem, { borderBottomColor: theme.border }]}>
                <View style={styles.settingInfo}>
                  <Ionicons name="timer" size={22} color={theme.primary} />
                  <View style={styles.settingTextContainer}>
                    <Text style={[styles.settingTitle, { color: theme.text }]}>Timer Completions</Text>
                    <Text style={[styles.settingDescription, { color: theme.textSecondary }]}>Notify when study timers complete</Text>
                  </View>
                </View>
                <Switch
                  trackColor={{ false: theme.border, true: theme.primary }}
                  thumbColor="#FFFFFF"
                  ios_backgroundColor={theme.border}
                  onValueChange={(value) => handleToggleChange('timerCompletions', value)}
                  value={notificationPrefs.timerCompletions}
                />
              </View>

              <View style={[styles.settingItem, { borderBottomColor: theme.border }]}>
                <View style={styles.settingInfo}>
                  <Ionicons name="flag" size={22} color={theme.primary} />
                  <View style={styles.settingTextContainer}>
                    <Text style={[styles.settingTitle, { color: theme.text }]}>Daily Goal Reminders</Text>
                    <Text style={[styles.settingDescription, { color: theme.textSecondary }]}>Remind about daily study goals</Text>
                  </View>
                </View>
                <Switch
                  trackColor={{ false: theme.border, true: theme.primary }}
                  thumbColor="#FFFFFF"
                  ios_backgroundColor={theme.border}
                  onValueChange={(value) => handleToggleChange('dailyGoalReminders', value)}
                  value={notificationPrefs.dailyGoalReminders}
                />
              </View>
            </View>

            <View style={styles.section}>
              <Text style={[styles.sectionTitle, { color: theme.textSecondary }]}>MOTIVATION</Text>

              <View style={[styles.settingItem, { borderBottomColor: theme.border }]}>
                <View style={styles.settingInfo}>
                  <Ionicons name="flame" size={22} color={theme.primary} />
                  <View style={styles.settingTextContainer}>
                    <Text style={[styles.settingTitle, { color: theme.text }]}>Streak Reminders</Text>
                    <Text style={[styles.settingDescription, { color: theme.textSecondary }]}>Remind to maintain study streaks</Text>
                  </View>
                </View>
                <Switch
                  trackColor={{ false: theme.border, true: theme.primary }}
                  thumbColor="#FFFFFF"
                  ios_backgroundColor={theme.border}
                  onValueChange={(value) => handleToggleChange('streakReminders', value)}
                  value={notificationPrefs.streakReminders}
                />
              </View>

              <View style={[styles.settingItem, { borderBottomColor: theme.border }]}>
                <View style={styles.settingInfo}>
                  <Ionicons name="trophy" size={22} color={theme.primary} />
                  <View style={styles.settingTextContainer}>
                    <Text style={[styles.settingTitle, { color: theme.text }]}>Achievement Alerts</Text>
                    <Text style={[styles.settingDescription, { color: theme.textSecondary }]}>Celebrate when you earn achievements</Text>
                  </View>
                </View>
                <Switch
                  trackColor={{ false: theme.border, true: theme.primary }}
                  thumbColor="#FFFFFF"
                  ios_backgroundColor={theme.border}
                  onValueChange={(value) => handleToggleChange('achievements', value)}
                  value={notificationPrefs.achievements}
                />
              </View>
            </View>
          </ScrollView>

          <View style={styles.footer}>
            <TouchableOpacity
              style={[styles.saveButton, { backgroundColor: theme.primary }]}
              onPress={handleSavePreferences}
            >
              <Text style={styles.saveButtonText}>Save Settings</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  modalContent: {
    width: '100%',
    maxHeight: '80%',
    borderRadius: 12,
    overflow: 'hidden',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  scrollContent: {
    maxHeight: '70%',
  },
  section: {
    paddingVertical: 8,
  },
  sectionTitle: {
    fontSize: 12,
    fontWeight: 'bold',
    marginBottom: 8,
    paddingHorizontal: 16,
  },
  settingItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 14,
    paddingHorizontal: 16,
    borderBottomWidth: 1,
  },
  settingInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
    marginRight: 10,
  },
  settingTextContainer: {
    marginLeft: 12,
    flex: 1,
  },
  settingTitle: {
    fontSize: 16,
    marginBottom: 4,
  },
  settingDescription: {
    fontSize: 12,
  },
  footer: {
    padding: 16,
    borderTopWidth: 1,
    borderTopColor: '#E0E0E0',
  },
  saveButton: {
    borderRadius: 8,
    paddingVertical: 14,
    alignItems: 'center',
  },
  saveButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default NotificationSettingsModal;
